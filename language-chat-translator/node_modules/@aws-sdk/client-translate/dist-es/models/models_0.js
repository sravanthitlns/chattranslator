import { SENSITIVE_STRING } from "@aws-sdk/smithy-client";
import { TranslateServiceException as __BaseException } from "./TranslateServiceException";
export class ConcurrentModificationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConcurrentModificationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConcurrentModificationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConcurrentModificationException.prototype);
        this.Message = opts.Message;
    }
}
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
    }
}
export const EncryptionKeyType = {
    KMS: "KMS",
};
export const ParallelDataFormat = {
    CSV: "CSV",
    TMX: "TMX",
    TSV: "TSV",
};
export const ParallelDataStatus = {
    ACTIVE: "ACTIVE",
    CREATING: "CREATING",
    DELETING: "DELETING",
    FAILED: "FAILED",
    UPDATING: "UPDATING",
};
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidParameterValueException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidParameterValueException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidParameterValueException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameterValueException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidRequestException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
        this.Message = opts.Message;
    }
}
export class LimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
export class TooManyRequestsException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyRequestsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
        this.Message = opts.Message;
    }
}
export class TooManyTagsException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyTagsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyTagsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyTagsException.prototype);
        this.ResourceArn = opts.ResourceArn;
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export const JobStatus = {
    COMPLETED: "COMPLETED",
    COMPLETED_WITH_ERROR: "COMPLETED_WITH_ERROR",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    STOPPED: "STOPPED",
    STOP_REQUESTED: "STOP_REQUESTED",
    SUBMITTED: "SUBMITTED",
};
export const Formality = {
    FORMAL: "FORMAL",
    INFORMAL: "INFORMAL",
};
export const Profanity = {
    MASK: "MASK",
};
export const TerminologyDataFormat = {
    CSV: "CSV",
    TMX: "TMX",
    TSV: "TSV",
};
export const Directionality = {
    MULTI: "MULTI",
    UNI: "UNI",
};
export const MergeStrategy = {
    OVERWRITE: "OVERWRITE",
};
export const DisplayLanguageCode = {
    DE: "de",
    EN: "en",
    ES: "es",
    FR: "fr",
    IT: "it",
    JA: "ja",
    KO: "ko",
    PT: "pt",
    ZH: "zh",
    ZH_TW: "zh-TW",
};
export class UnsupportedDisplayLanguageCodeException extends __BaseException {
    constructor(opts) {
        super({
            name: "UnsupportedDisplayLanguageCodeException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnsupportedDisplayLanguageCodeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedDisplayLanguageCodeException.prototype);
        this.Message = opts.Message;
        this.DisplayLanguageCode = opts.DisplayLanguageCode;
    }
}
export class InvalidFilterException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidFilterException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidFilterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidFilterException.prototype);
        this.Message = opts.Message;
    }
}
export class UnsupportedLanguagePairException extends __BaseException {
    constructor(opts) {
        super({
            name: "UnsupportedLanguagePairException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnsupportedLanguagePairException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedLanguagePairException.prototype);
        this.Message = opts.Message;
        this.SourceLanguageCode = opts.SourceLanguageCode;
        this.TargetLanguageCode = opts.TargetLanguageCode;
    }
}
export class DetectedLanguageLowConfidenceException extends __BaseException {
    constructor(opts) {
        super({
            name: "DetectedLanguageLowConfidenceException",
            $fault: "client",
            ...opts,
        });
        this.name = "DetectedLanguageLowConfidenceException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DetectedLanguageLowConfidenceException.prototype);
        this.Message = opts.Message;
        this.DetectedLanguageCode = opts.DetectedLanguageCode;
    }
}
export class ServiceUnavailableException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceUnavailableException",
            $fault: "server",
            ...opts,
        });
        this.name = "ServiceUnavailableException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServiceUnavailableException.prototype);
        this.Message = opts.Message;
    }
}
export class TextSizeLimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "TextSizeLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "TextSizeLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TextSizeLimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
export const TerminologyDataFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.File && { File: SENSITIVE_STRING }),
});
export const ImportTerminologyRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TerminologyData && { TerminologyData: TerminologyDataFilterSensitiveLog(obj.TerminologyData) }),
});
