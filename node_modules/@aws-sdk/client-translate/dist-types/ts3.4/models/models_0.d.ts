import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
import { TranslateServiceException as __BaseException } from "./TranslateServiceException";
export interface Term {
  SourceText?: string;
  TargetText?: string;
}
export interface AppliedTerminology {
  Name?: string;
  Terms?: Term[];
}
export declare class ConcurrentModificationException extends __BaseException {
  readonly name: "ConcurrentModificationException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      ConcurrentModificationException,
      __BaseException
    >
  );
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export declare const EncryptionKeyType: {
  readonly KMS: "KMS";
};
export type EncryptionKeyType =
  (typeof EncryptionKeyType)[keyof typeof EncryptionKeyType];
export interface EncryptionKey {
  Type: EncryptionKeyType | string | undefined;
  Id: string | undefined;
}
export declare const ParallelDataFormat: {
  readonly CSV: "CSV";
  readonly TMX: "TMX";
  readonly TSV: "TSV";
};
export type ParallelDataFormat =
  (typeof ParallelDataFormat)[keyof typeof ParallelDataFormat];
export interface ParallelDataConfig {
  S3Uri: string | undefined;
  Format: ParallelDataFormat | string | undefined;
}
export interface Tag {
  Key: string | undefined;
  Value: string | undefined;
}
export interface CreateParallelDataRequest {
  Name: string | undefined;
  Description?: string;
  ParallelDataConfig: ParallelDataConfig | undefined;
  EncryptionKey?: EncryptionKey;
  ClientToken?: string;
  Tags?: Tag[];
}
export declare const ParallelDataStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
  readonly FAILED: "FAILED";
  readonly UPDATING: "UPDATING";
};
export type ParallelDataStatus =
  (typeof ParallelDataStatus)[keyof typeof ParallelDataStatus];
export interface CreateParallelDataResponse {
  Name?: string;
  Status?: ParallelDataStatus | string;
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class InvalidParameterValueException extends __BaseException {
  readonly name: "InvalidParameterValueException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidParameterValueException, __BaseException>
  );
}
export declare class InvalidRequestException extends __BaseException {
  readonly name: "InvalidRequestException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidRequestException, __BaseException>
  );
}
export declare class LimitExceededException extends __BaseException {
  readonly name: "LimitExceededException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<LimitExceededException, __BaseException>
  );
}
export declare class TooManyRequestsException extends __BaseException {
  readonly name: "TooManyRequestsException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<TooManyRequestsException, __BaseException>
  );
}
export declare class TooManyTagsException extends __BaseException {
  readonly name: "TooManyTagsException";
  readonly $fault: "client";
  ResourceArn?: string;
  constructor(
    opts: __ExceptionOptionType<TooManyTagsException, __BaseException>
  );
}
export interface DeleteParallelDataRequest {
  Name: string | undefined;
}
export interface DeleteParallelDataResponse {
  Name?: string;
  Status?: ParallelDataStatus | string;
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export interface DeleteTerminologyRequest {
  Name: string | undefined;
}
export interface DescribeTextTranslationJobRequest {
  JobId: string | undefined;
}
export interface InputDataConfig {
  S3Uri: string | undefined;
  ContentType: string | undefined;
}
export interface JobDetails {
  TranslatedDocumentsCount?: number;
  DocumentsWithErrorsCount?: number;
  InputDocumentsCount?: number;
}
export declare const JobStatus: {
  readonly COMPLETED: "COMPLETED";
  readonly COMPLETED_WITH_ERROR: "COMPLETED_WITH_ERROR";
  readonly FAILED: "FAILED";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly STOPPED: "STOPPED";
  readonly STOP_REQUESTED: "STOP_REQUESTED";
  readonly SUBMITTED: "SUBMITTED";
};
export type JobStatus = (typeof JobStatus)[keyof typeof JobStatus];
export interface OutputDataConfig {
  S3Uri: string | undefined;
  EncryptionKey?: EncryptionKey;
}
export declare const Formality: {
  readonly FORMAL: "FORMAL";
  readonly INFORMAL: "INFORMAL";
};
export type Formality = (typeof Formality)[keyof typeof Formality];
export declare const Profanity: {
  readonly MASK: "MASK";
};
export type Profanity = (typeof Profanity)[keyof typeof Profanity];
export interface TranslationSettings {
  Formality?: Formality | string;
  Profanity?: Profanity | string;
}
export interface TextTranslationJobProperties {
  JobId?: string;
  JobName?: string;
  JobStatus?: JobStatus | string;
  JobDetails?: JobDetails;
  SourceLanguageCode?: string;
  TargetLanguageCodes?: string[];
  TerminologyNames?: string[];
  ParallelDataNames?: string[];
  Message?: string;
  SubmittedTime?: Date;
  EndTime?: Date;
  InputDataConfig?: InputDataConfig;
  OutputDataConfig?: OutputDataConfig;
  DataAccessRoleArn?: string;
  Settings?: TranslationSettings;
}
export interface DescribeTextTranslationJobResponse {
  TextTranslationJobProperties?: TextTranslationJobProperties;
}
export interface GetParallelDataRequest {
  Name: string | undefined;
}
export interface ParallelDataDataLocation {
  RepositoryType: string | undefined;
  Location: string | undefined;
}
export interface ParallelDataProperties {
  Name?: string;
  Arn?: string;
  Description?: string;
  Status?: ParallelDataStatus | string;
  SourceLanguageCode?: string;
  TargetLanguageCodes?: string[];
  ParallelDataConfig?: ParallelDataConfig;
  Message?: string;
  ImportedDataSize?: number;
  ImportedRecordCount?: number;
  FailedRecordCount?: number;
  SkippedRecordCount?: number;
  EncryptionKey?: EncryptionKey;
  CreatedAt?: Date;
  LastUpdatedAt?: Date;
  LatestUpdateAttemptStatus?: ParallelDataStatus | string;
  LatestUpdateAttemptAt?: Date;
}
export interface GetParallelDataResponse {
  ParallelDataProperties?: ParallelDataProperties;
  DataLocation?: ParallelDataDataLocation;
  AuxiliaryDataLocation?: ParallelDataDataLocation;
  LatestUpdateAttemptAuxiliaryDataLocation?: ParallelDataDataLocation;
}
export declare const TerminologyDataFormat: {
  readonly CSV: "CSV";
  readonly TMX: "TMX";
  readonly TSV: "TSV";
};
export type TerminologyDataFormat =
  (typeof TerminologyDataFormat)[keyof typeof TerminologyDataFormat];
export interface GetTerminologyRequest {
  Name: string | undefined;
  TerminologyDataFormat?: TerminologyDataFormat | string;
}
export interface TerminologyDataLocation {
  RepositoryType: string | undefined;
  Location: string | undefined;
}
export declare const Directionality: {
  readonly MULTI: "MULTI";
  readonly UNI: "UNI";
};
export type Directionality =
  (typeof Directionality)[keyof typeof Directionality];
export interface TerminologyProperties {
  Name?: string;
  Description?: string;
  Arn?: string;
  SourceLanguageCode?: string;
  TargetLanguageCodes?: string[];
  EncryptionKey?: EncryptionKey;
  SizeBytes?: number;
  TermCount?: number;
  CreatedAt?: Date;
  LastUpdatedAt?: Date;
  Directionality?: Directionality | string;
  Message?: string;
  SkippedTermCount?: number;
  Format?: TerminologyDataFormat | string;
}
export interface GetTerminologyResponse {
  TerminologyProperties?: TerminologyProperties;
  TerminologyDataLocation?: TerminologyDataLocation;
  AuxiliaryDataLocation?: TerminologyDataLocation;
}
export declare const MergeStrategy: {
  readonly OVERWRITE: "OVERWRITE";
};
export type MergeStrategy = (typeof MergeStrategy)[keyof typeof MergeStrategy];
export interface TerminologyData {
  File: Uint8Array | undefined;
  Format: TerminologyDataFormat | string | undefined;
  Directionality?: Directionality | string;
}
export interface ImportTerminologyRequest {
  Name: string | undefined;
  MergeStrategy: MergeStrategy | string | undefined;
  Description?: string;
  TerminologyData: TerminologyData | undefined;
  EncryptionKey?: EncryptionKey;
  Tags?: Tag[];
}
export interface ImportTerminologyResponse {
  TerminologyProperties?: TerminologyProperties;
  AuxiliaryDataLocation?: TerminologyDataLocation;
}
export declare const DisplayLanguageCode: {
  readonly DE: "de";
  readonly EN: "en";
  readonly ES: "es";
  readonly FR: "fr";
  readonly IT: "it";
  readonly JA: "ja";
  readonly KO: "ko";
  readonly PT: "pt";
  readonly ZH: "zh";
  readonly ZH_TW: "zh-TW";
};
export type DisplayLanguageCode =
  (typeof DisplayLanguageCode)[keyof typeof DisplayLanguageCode];
export interface ListLanguagesRequest {
  DisplayLanguageCode?: DisplayLanguageCode | string;
  NextToken?: string;
  MaxResults?: number;
}
export interface Language {
  LanguageName: string | undefined;
  LanguageCode: string | undefined;
}
export interface ListLanguagesResponse {
  Languages?: Language[];
  DisplayLanguageCode?: DisplayLanguageCode | string;
  NextToken?: string;
}
export declare class UnsupportedDisplayLanguageCodeException extends __BaseException {
  readonly name: "UnsupportedDisplayLanguageCodeException";
  readonly $fault: "client";
  Message?: string;
  DisplayLanguageCode?: string;
  constructor(
    opts: __ExceptionOptionType<
      UnsupportedDisplayLanguageCodeException,
      __BaseException
    >
  );
}
export interface ListParallelDataRequest {
  NextToken?: string;
  MaxResults?: number;
}
export interface ListParallelDataResponse {
  ParallelDataPropertiesList?: ParallelDataProperties[];
  NextToken?: string;
}
export interface ListTagsForResourceRequest {
  ResourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  Tags?: Tag[];
}
export interface ListTerminologiesRequest {
  NextToken?: string;
  MaxResults?: number;
}
export interface ListTerminologiesResponse {
  TerminologyPropertiesList?: TerminologyProperties[];
  NextToken?: string;
}
export declare class InvalidFilterException extends __BaseException {
  readonly name: "InvalidFilterException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidFilterException, __BaseException>
  );
}
export interface TextTranslationJobFilter {
  JobName?: string;
  JobStatus?: JobStatus | string;
  SubmittedBeforeTime?: Date;
  SubmittedAfterTime?: Date;
}
export interface ListTextTranslationJobsRequest {
  Filter?: TextTranslationJobFilter;
  NextToken?: string;
  MaxResults?: number;
}
export interface ListTextTranslationJobsResponse {
  TextTranslationJobPropertiesList?: TextTranslationJobProperties[];
  NextToken?: string;
}
export interface StartTextTranslationJobRequest {
  JobName?: string;
  InputDataConfig: InputDataConfig | undefined;
  OutputDataConfig: OutputDataConfig | undefined;
  DataAccessRoleArn: string | undefined;
  SourceLanguageCode: string | undefined;
  TargetLanguageCodes: string[] | undefined;
  TerminologyNames?: string[];
  ParallelDataNames?: string[];
  ClientToken?: string;
  Settings?: TranslationSettings;
}
export interface StartTextTranslationJobResponse {
  JobId?: string;
  JobStatus?: JobStatus | string;
}
export declare class UnsupportedLanguagePairException extends __BaseException {
  readonly name: "UnsupportedLanguagePairException";
  readonly $fault: "client";
  Message?: string;
  SourceLanguageCode?: string;
  TargetLanguageCode?: string;
  constructor(
    opts: __ExceptionOptionType<
      UnsupportedLanguagePairException,
      __BaseException
    >
  );
}
export interface StopTextTranslationJobRequest {
  JobId: string | undefined;
}
export interface StopTextTranslationJobResponse {
  JobId?: string;
  JobStatus?: JobStatus | string;
}
export interface TagResourceRequest {
  ResourceArn: string | undefined;
  Tags: Tag[] | undefined;
}
export interface TagResourceResponse {}
export declare class DetectedLanguageLowConfidenceException extends __BaseException {
  readonly name: "DetectedLanguageLowConfidenceException";
  readonly $fault: "client";
  Message?: string;
  DetectedLanguageCode?: string;
  constructor(
    opts: __ExceptionOptionType<
      DetectedLanguageLowConfidenceException,
      __BaseException
    >
  );
}
export declare class ServiceUnavailableException extends __BaseException {
  readonly name: "ServiceUnavailableException";
  readonly $fault: "server";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ServiceUnavailableException, __BaseException>
  );
}
export declare class TextSizeLimitExceededException extends __BaseException {
  readonly name: "TextSizeLimitExceededException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<TextSizeLimitExceededException, __BaseException>
  );
}
export interface TranslateTextRequest {
  Text: string | undefined;
  TerminologyNames?: string[];
  SourceLanguageCode: string | undefined;
  TargetLanguageCode: string | undefined;
  Settings?: TranslationSettings;
}
export interface TranslateTextResponse {
  TranslatedText: string | undefined;
  SourceLanguageCode: string | undefined;
  TargetLanguageCode: string | undefined;
  AppliedTerminologies?: AppliedTerminology[];
  AppliedSettings?: TranslationSettings;
}
export interface UntagResourceRequest {
  ResourceArn: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateParallelDataRequest {
  Name: string | undefined;
  Description?: string;
  ParallelDataConfig: ParallelDataConfig | undefined;
  ClientToken?: string;
}
export interface UpdateParallelDataResponse {
  Name?: string;
  Status?: ParallelDataStatus | string;
  LatestUpdateAttemptStatus?: ParallelDataStatus | string;
  LatestUpdateAttemptAt?: Date;
}
export declare const TerminologyDataFilterSensitiveLog: (
  obj: TerminologyData
) => any;
export declare const ImportTerminologyRequestFilterSensitiveLog: (
  obj: ImportTerminologyRequest
) => any;
