"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.de_UpdateParallelDataCommand = exports.de_UntagResourceCommand = exports.de_TranslateTextCommand = exports.de_TranslateDocumentCommand = exports.de_TagResourceCommand = exports.de_StopTextTranslationJobCommand = exports.de_StartTextTranslationJobCommand = exports.de_ListTextTranslationJobsCommand = exports.de_ListTerminologiesCommand = exports.de_ListTagsForResourceCommand = exports.de_ListParallelDataCommand = exports.de_ListLanguagesCommand = exports.de_ImportTerminologyCommand = exports.de_GetTerminologyCommand = exports.de_GetParallelDataCommand = exports.de_DescribeTextTranslationJobCommand = exports.de_DeleteTerminologyCommand = exports.de_DeleteParallelDataCommand = exports.de_CreateParallelDataCommand = exports.se_UpdateParallelDataCommand = exports.se_UntagResourceCommand = exports.se_TranslateTextCommand = exports.se_TranslateDocumentCommand = exports.se_TagResourceCommand = exports.se_StopTextTranslationJobCommand = exports.se_StartTextTranslationJobCommand = exports.se_ListTextTranslationJobsCommand = exports.se_ListTerminologiesCommand = exports.se_ListTagsForResourceCommand = exports.se_ListParallelDataCommand = exports.se_ListLanguagesCommand = exports.se_ImportTerminologyCommand = exports.se_GetTerminologyCommand = exports.se_GetParallelDataCommand = exports.se_DescribeTextTranslationJobCommand = exports.se_DeleteTerminologyCommand = exports.se_DeleteParallelDataCommand = exports.se_CreateParallelDataCommand = void 0;
const smithy_client_1 = require("@aws-sdk/smithy-client");
const protocol_http_1 = require("@smithy/protocol-http");
const uuid_1 = require("uuid");
const models_0_1 = require("../models/models_0");
const TranslateServiceException_1 = require("../models/TranslateServiceException");
const se_CreateParallelDataCommand = async (input, context) => {
    const headers = sharedHeaders("CreateParallelData");
    let body;
    body = JSON.stringify(se_CreateParallelDataRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateParallelDataCommand = se_CreateParallelDataCommand;
const se_DeleteParallelDataCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteParallelData");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteParallelDataCommand = se_DeleteParallelDataCommand;
const se_DeleteTerminologyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteTerminology");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteTerminologyCommand = se_DeleteTerminologyCommand;
const se_DescribeTextTranslationJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeTextTranslationJob");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeTextTranslationJobCommand = se_DescribeTextTranslationJobCommand;
const se_GetParallelDataCommand = async (input, context) => {
    const headers = sharedHeaders("GetParallelData");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetParallelDataCommand = se_GetParallelDataCommand;
const se_GetTerminologyCommand = async (input, context) => {
    const headers = sharedHeaders("GetTerminology");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetTerminologyCommand = se_GetTerminologyCommand;
const se_ImportTerminologyCommand = async (input, context) => {
    const headers = sharedHeaders("ImportTerminology");
    let body;
    body = JSON.stringify(se_ImportTerminologyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ImportTerminologyCommand = se_ImportTerminologyCommand;
const se_ListLanguagesCommand = async (input, context) => {
    const headers = sharedHeaders("ListLanguages");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListLanguagesCommand = se_ListLanguagesCommand;
const se_ListParallelDataCommand = async (input, context) => {
    const headers = sharedHeaders("ListParallelData");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListParallelDataCommand = se_ListParallelDataCommand;
const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListTagsForResourceCommand = se_ListTagsForResourceCommand;
const se_ListTerminologiesCommand = async (input, context) => {
    const headers = sharedHeaders("ListTerminologies");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListTerminologiesCommand = se_ListTerminologiesCommand;
const se_ListTextTranslationJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListTextTranslationJobs");
    let body;
    body = JSON.stringify(se_ListTextTranslationJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListTextTranslationJobsCommand = se_ListTextTranslationJobsCommand;
const se_StartTextTranslationJobCommand = async (input, context) => {
    const headers = sharedHeaders("StartTextTranslationJob");
    let body;
    body = JSON.stringify(se_StartTextTranslationJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartTextTranslationJobCommand = se_StartTextTranslationJobCommand;
const se_StopTextTranslationJobCommand = async (input, context) => {
    const headers = sharedHeaders("StopTextTranslationJob");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StopTextTranslationJobCommand = se_StopTextTranslationJobCommand;
const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_TagResourceCommand = se_TagResourceCommand;
const se_TranslateDocumentCommand = async (input, context) => {
    const headers = sharedHeaders("TranslateDocument");
    let body;
    body = JSON.stringify(se_TranslateDocumentRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_TranslateDocumentCommand = se_TranslateDocumentCommand;
const se_TranslateTextCommand = async (input, context) => {
    const headers = sharedHeaders("TranslateText");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_TranslateTextCommand = se_TranslateTextCommand;
const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UntagResourceCommand = se_UntagResourceCommand;
const se_UpdateParallelDataCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateParallelData");
    let body;
    body = JSON.stringify(se_UpdateParallelDataRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateParallelDataCommand = se_UpdateParallelDataCommand;
const de_CreateParallelDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateParallelDataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_CreateParallelDataCommand = de_CreateParallelDataCommand;
const de_CreateParallelDataCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.translate#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.translate#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.translate#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.translate#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.translate#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.translate#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.translate#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.translate#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteParallelDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteParallelDataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DeleteParallelDataCommand = de_DeleteParallelDataCommand;
const de_DeleteParallelDataCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.translate#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.translate#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.translate#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.translate#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteTerminologyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteTerminologyCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
exports.de_DeleteTerminologyCommand = de_DeleteTerminologyCommand;
const de_DeleteTerminologyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.translate#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.translate#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.translate#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.translate#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DescribeTextTranslationJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeTextTranslationJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeTextTranslationJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeTextTranslationJobCommand = de_DescribeTextTranslationJobCommand;
const de_DescribeTextTranslationJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.translate#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.translate#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.translate#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetParallelDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetParallelDataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetParallelDataResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetParallelDataCommand = de_GetParallelDataCommand;
const de_GetParallelDataCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.translate#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.translate#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.translate#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.translate#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetTerminologyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetTerminologyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetTerminologyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetTerminologyCommand = de_GetTerminologyCommand;
const de_GetTerminologyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.translate#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.translate#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.translate#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.translate#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ImportTerminologyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ImportTerminologyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ImportTerminologyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ImportTerminologyCommand = de_ImportTerminologyCommand;
const de_ImportTerminologyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.translate#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.translate#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.translate#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.translate#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.translate#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.translate#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListLanguagesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListLanguagesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListLanguagesCommand = de_ListLanguagesCommand;
const de_ListLanguagesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.translate#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.translate#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.translate#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnsupportedDisplayLanguageCodeException":
        case "com.amazonaws.translate#UnsupportedDisplayLanguageCodeException":
            throw await de_UnsupportedDisplayLanguageCodeExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListParallelDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListParallelDataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListParallelDataResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListParallelDataCommand = de_ListParallelDataCommand;
const de_ListParallelDataCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.translate#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.translate#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.translate#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListTagsForResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListTagsForResourceCommand = de_ListTagsForResourceCommand;
const de_ListTagsForResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.translate#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.translate#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.translate#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListTerminologiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListTerminologiesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListTerminologiesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListTerminologiesCommand = de_ListTerminologiesCommand;
const de_ListTerminologiesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.translate#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.translate#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.translate#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListTextTranslationJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListTextTranslationJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListTextTranslationJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListTextTranslationJobsCommand = de_ListTextTranslationJobsCommand;
const de_ListTextTranslationJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.translate#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidFilterException":
        case "com.amazonaws.translate#InvalidFilterException":
            throw await de_InvalidFilterExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.translate#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.translate#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StartTextTranslationJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartTextTranslationJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StartTextTranslationJobCommand = de_StartTextTranslationJobCommand;
const de_StartTextTranslationJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.translate#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.translate#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.translate#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.translate#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.translate#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnsupportedLanguagePairException":
        case "com.amazonaws.translate#UnsupportedLanguagePairException":
            throw await de_UnsupportedLanguagePairExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StopTextTranslationJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopTextTranslationJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_StopTextTranslationJobCommand = de_StopTextTranslationJobCommand;
const de_StopTextTranslationJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.translate#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.translate#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.translate#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_TagResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_TagResourceCommand = de_TagResourceCommand;
const de_TagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.translate#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.translate#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.translate#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.translate#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.translate#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_TranslateDocumentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_TranslateDocumentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_TranslateDocumentResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_TranslateDocumentCommand = de_TranslateDocumentCommand;
const de_TranslateDocumentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.translate#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.translate#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.translate#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.translate#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.translate#ServiceUnavailableException":
            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.translate#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnsupportedLanguagePairException":
        case "com.amazonaws.translate#UnsupportedLanguagePairException":
            throw await de_UnsupportedLanguagePairExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_TranslateTextCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_TranslateTextCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_TranslateTextCommand = de_TranslateTextCommand;
const de_TranslateTextCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DetectedLanguageLowConfidenceException":
        case "com.amazonaws.translate#DetectedLanguageLowConfidenceException":
            throw await de_DetectedLanguageLowConfidenceExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.translate#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.translate#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.translate#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.translate#ServiceUnavailableException":
            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "TextSizeLimitExceededException":
        case "com.amazonaws.translate#TextSizeLimitExceededException":
            throw await de_TextSizeLimitExceededExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.translate#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnsupportedLanguagePairException":
        case "com.amazonaws.translate#UnsupportedLanguagePairException":
            throw await de_UnsupportedLanguagePairExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UntagResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UntagResourceCommand = de_UntagResourceCommand;
const de_UntagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.translate#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.translate#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.translate#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.translate#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateParallelDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateParallelDataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateParallelDataResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_UpdateParallelDataCommand = de_UpdateParallelDataCommand;
const de_UpdateParallelDataCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.translate#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.translate#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.translate#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.translate#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.translate#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.translate#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.translate#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.translate#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ConcurrentModificationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ConcurrentModificationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_DetectedLanguageLowConfidenceExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.DetectedLanguageLowConfidenceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidFilterExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidFilterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidParameterValueExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidParameterValueException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ServiceUnavailableExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ServiceUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_TextSizeLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.TextSizeLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_TooManyRequestsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_TooManyTagsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.TooManyTagsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_UnsupportedDisplayLanguageCodeExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.UnsupportedDisplayLanguageCodeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_UnsupportedLanguagePairExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.UnsupportedLanguagePairException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const se_CreateParallelDataRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        ClientToken: [true, (_) => _ ?? (0, uuid_1.v4)()],
        Description: [],
        EncryptionKey: smithy_client_1._json,
        Name: [],
        ParallelDataConfig: smithy_client_1._json,
        Tags: smithy_client_1._json,
    });
};
const se_Document = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Content: context.base64Encoder,
        ContentType: [],
    });
};
const se_ImportTerminologyRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Description: [],
        EncryptionKey: smithy_client_1._json,
        MergeStrategy: [],
        Name: [],
        Tags: smithy_client_1._json,
        TerminologyData: (_) => se_TerminologyData(_, context),
    });
};
const se_ListTextTranslationJobsRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Filter: (_) => se_TextTranslationJobFilter(_, context),
        MaxResults: [],
        NextToken: [],
    });
};
const se_StartTextTranslationJobRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        ClientToken: [true, (_) => _ ?? (0, uuid_1.v4)()],
        DataAccessRoleArn: [],
        InputDataConfig: smithy_client_1._json,
        JobName: [],
        OutputDataConfig: smithy_client_1._json,
        ParallelDataNames: smithy_client_1._json,
        Settings: smithy_client_1._json,
        SourceLanguageCode: [],
        TargetLanguageCodes: smithy_client_1._json,
        TerminologyNames: smithy_client_1._json,
    });
};
const se_TerminologyData = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Directionality: [],
        File: context.base64Encoder,
        Format: [],
    });
};
const se_TextTranslationJobFilter = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        JobName: [],
        JobStatus: [],
        SubmittedAfterTime: (_) => Math.round(_.getTime() / 1000),
        SubmittedBeforeTime: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_TranslateDocumentRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        Document: (_) => se_Document(_, context),
        Settings: smithy_client_1._json,
        SourceLanguageCode: [],
        TargetLanguageCode: [],
        TerminologyNames: smithy_client_1._json,
    });
};
const se_UpdateParallelDataRequest = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        ClientToken: [true, (_) => _ ?? (0, uuid_1.v4)()],
        Description: [],
        Name: [],
        ParallelDataConfig: smithy_client_1._json,
    });
};
const de_DescribeTextTranslationJobResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        TextTranslationJobProperties: (_) => de_TextTranslationJobProperties(_, context),
    });
};
const de_GetParallelDataResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AuxiliaryDataLocation: smithy_client_1._json,
        DataLocation: smithy_client_1._json,
        LatestUpdateAttemptAuxiliaryDataLocation: smithy_client_1._json,
        ParallelDataProperties: (_) => de_ParallelDataProperties(_, context),
    });
};
const de_GetTerminologyResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AuxiliaryDataLocation: smithy_client_1._json,
        TerminologyDataLocation: smithy_client_1._json,
        TerminologyProperties: (_) => de_TerminologyProperties(_, context),
    });
};
const de_ImportTerminologyResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AuxiliaryDataLocation: smithy_client_1._json,
        TerminologyProperties: (_) => de_TerminologyProperties(_, context),
    });
};
const de_ListParallelDataResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        ParallelDataPropertiesList: (_) => de_ParallelDataPropertiesList(_, context),
    });
};
const de_ListTerminologiesResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        TerminologyPropertiesList: (_) => de_TerminologyPropertiesList(_, context),
    });
};
const de_ListTextTranslationJobsResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        NextToken: smithy_client_1.expectString,
        TextTranslationJobPropertiesList: (_) => de_TextTranslationJobPropertiesList(_, context),
    });
};
const de_ParallelDataProperties = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Arn: smithy_client_1.expectString,
        CreatedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Description: smithy_client_1.expectString,
        EncryptionKey: smithy_client_1._json,
        FailedRecordCount: smithy_client_1.expectLong,
        ImportedDataSize: smithy_client_1.expectLong,
        ImportedRecordCount: smithy_client_1.expectLong,
        LastUpdatedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LatestUpdateAttemptAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LatestUpdateAttemptStatus: smithy_client_1.expectString,
        Message: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        ParallelDataConfig: smithy_client_1._json,
        SkippedRecordCount: smithy_client_1.expectLong,
        SourceLanguageCode: smithy_client_1.expectString,
        Status: smithy_client_1.expectString,
        TargetLanguageCodes: smithy_client_1._json,
    });
};
const de_ParallelDataPropertiesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ParallelDataProperties(entry, context);
    });
    return retVal;
};
const de_TerminologyProperties = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Arn: smithy_client_1.expectString,
        CreatedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Description: smithy_client_1.expectString,
        Directionality: smithy_client_1.expectString,
        EncryptionKey: smithy_client_1._json,
        Format: smithy_client_1.expectString,
        LastUpdatedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Message: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        SizeBytes: smithy_client_1.expectInt32,
        SkippedTermCount: smithy_client_1.expectInt32,
        SourceLanguageCode: smithy_client_1.expectString,
        TargetLanguageCodes: smithy_client_1._json,
        TermCount: smithy_client_1.expectInt32,
    });
};
const de_TerminologyPropertiesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TerminologyProperties(entry, context);
    });
    return retVal;
};
const de_TextTranslationJobProperties = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        DataAccessRoleArn: smithy_client_1.expectString,
        EndTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        InputDataConfig: smithy_client_1._json,
        JobDetails: smithy_client_1._json,
        JobId: smithy_client_1.expectString,
        JobName: smithy_client_1.expectString,
        JobStatus: smithy_client_1.expectString,
        Message: smithy_client_1.expectString,
        OutputDataConfig: smithy_client_1._json,
        ParallelDataNames: smithy_client_1._json,
        Settings: smithy_client_1._json,
        SourceLanguageCode: smithy_client_1.expectString,
        SubmittedTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        TargetLanguageCodes: smithy_client_1._json,
        TerminologyNames: smithy_client_1._json,
    });
};
const de_TextTranslationJobPropertiesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TextTranslationJobProperties(entry, context);
    });
    return retVal;
};
const de_TranslatedDocument = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        Content: context.base64Decoder,
    });
};
const de_TranslateDocumentResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        AppliedSettings: smithy_client_1._json,
        AppliedTerminologies: smithy_client_1._json,
        SourceLanguageCode: smithy_client_1.expectString,
        TargetLanguageCode: smithy_client_1.expectString,
        TranslatedDocument: (_) => de_TranslatedDocument(_, context),
    });
};
const de_UpdateParallelDataResponse = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        LatestUpdateAttemptAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        LatestUpdateAttemptStatus: smithy_client_1.expectString,
        Name: smithy_client_1.expectString,
        Status: smithy_client_1.expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = (0, smithy_client_1.withBaseException)(TranslateServiceException_1.TranslateServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocol_http_1.HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `AWSShineFrontendService_20170701.${operation}`,
    };
}
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
