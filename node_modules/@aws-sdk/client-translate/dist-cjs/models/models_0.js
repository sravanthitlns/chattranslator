"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportTerminologyRequestFilterSensitiveLog = exports.TerminologyDataFilterSensitiveLog = exports.TextSizeLimitExceededException = exports.ServiceUnavailableException = exports.DetectedLanguageLowConfidenceException = exports.UnsupportedLanguagePairException = exports.InvalidFilterException = exports.UnsupportedDisplayLanguageCodeException = exports.DisplayLanguageCode = exports.MergeStrategy = exports.Directionality = exports.TerminologyDataFormat = exports.Profanity = exports.Formality = exports.JobStatus = exports.ResourceNotFoundException = exports.TooManyTagsException = exports.TooManyRequestsException = exports.LimitExceededException = exports.InvalidRequestException = exports.InvalidParameterValueException = exports.InternalServerException = exports.ParallelDataStatus = exports.ParallelDataFormat = exports.EncryptionKeyType = exports.ConflictException = exports.ConcurrentModificationException = void 0;
const smithy_client_1 = require("@aws-sdk/smithy-client");
const TranslateServiceException_1 = require("./TranslateServiceException");
class ConcurrentModificationException extends TranslateServiceException_1.TranslateServiceException {
    constructor(opts) {
        super({
            name: "ConcurrentModificationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConcurrentModificationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConcurrentModificationException.prototype);
        this.Message = opts.Message;
    }
}
exports.ConcurrentModificationException = ConcurrentModificationException;
class ConflictException extends TranslateServiceException_1.TranslateServiceException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
    }
}
exports.ConflictException = ConflictException;
exports.EncryptionKeyType = {
    KMS: "KMS",
};
exports.ParallelDataFormat = {
    CSV: "CSV",
    TMX: "TMX",
    TSV: "TSV",
};
exports.ParallelDataStatus = {
    ACTIVE: "ACTIVE",
    CREATING: "CREATING",
    DELETING: "DELETING",
    FAILED: "FAILED",
    UPDATING: "UPDATING",
};
class InternalServerException extends TranslateServiceException_1.TranslateServiceException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
    }
}
exports.InternalServerException = InternalServerException;
class InvalidParameterValueException extends TranslateServiceException_1.TranslateServiceException {
    constructor(opts) {
        super({
            name: "InvalidParameterValueException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidParameterValueException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameterValueException.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidParameterValueException = InvalidParameterValueException;
class InvalidRequestException extends TranslateServiceException_1.TranslateServiceException {
    constructor(opts) {
        super({
            name: "InvalidRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidRequestException = InvalidRequestException;
class LimitExceededException extends TranslateServiceException_1.TranslateServiceException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
exports.LimitExceededException = LimitExceededException;
class TooManyRequestsException extends TranslateServiceException_1.TranslateServiceException {
    constructor(opts) {
        super({
            name: "TooManyRequestsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
        this.Message = opts.Message;
    }
}
exports.TooManyRequestsException = TooManyRequestsException;
class TooManyTagsException extends TranslateServiceException_1.TranslateServiceException {
    constructor(opts) {
        super({
            name: "TooManyTagsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyTagsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyTagsException.prototype);
        this.ResourceArn = opts.ResourceArn;
    }
}
exports.TooManyTagsException = TooManyTagsException;
class ResourceNotFoundException extends TranslateServiceException_1.TranslateServiceException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
exports.ResourceNotFoundException = ResourceNotFoundException;
exports.JobStatus = {
    COMPLETED: "COMPLETED",
    COMPLETED_WITH_ERROR: "COMPLETED_WITH_ERROR",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    STOPPED: "STOPPED",
    STOP_REQUESTED: "STOP_REQUESTED",
    SUBMITTED: "SUBMITTED",
};
exports.Formality = {
    FORMAL: "FORMAL",
    INFORMAL: "INFORMAL",
};
exports.Profanity = {
    MASK: "MASK",
};
exports.TerminologyDataFormat = {
    CSV: "CSV",
    TMX: "TMX",
    TSV: "TSV",
};
exports.Directionality = {
    MULTI: "MULTI",
    UNI: "UNI",
};
exports.MergeStrategy = {
    OVERWRITE: "OVERWRITE",
};
exports.DisplayLanguageCode = {
    DE: "de",
    EN: "en",
    ES: "es",
    FR: "fr",
    IT: "it",
    JA: "ja",
    KO: "ko",
    PT: "pt",
    ZH: "zh",
    ZH_TW: "zh-TW",
};
class UnsupportedDisplayLanguageCodeException extends TranslateServiceException_1.TranslateServiceException {
    constructor(opts) {
        super({
            name: "UnsupportedDisplayLanguageCodeException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnsupportedDisplayLanguageCodeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedDisplayLanguageCodeException.prototype);
        this.Message = opts.Message;
        this.DisplayLanguageCode = opts.DisplayLanguageCode;
    }
}
exports.UnsupportedDisplayLanguageCodeException = UnsupportedDisplayLanguageCodeException;
class InvalidFilterException extends TranslateServiceException_1.TranslateServiceException {
    constructor(opts) {
        super({
            name: "InvalidFilterException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidFilterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidFilterException.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidFilterException = InvalidFilterException;
class UnsupportedLanguagePairException extends TranslateServiceException_1.TranslateServiceException {
    constructor(opts) {
        super({
            name: "UnsupportedLanguagePairException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnsupportedLanguagePairException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedLanguagePairException.prototype);
        this.Message = opts.Message;
        this.SourceLanguageCode = opts.SourceLanguageCode;
        this.TargetLanguageCode = opts.TargetLanguageCode;
    }
}
exports.UnsupportedLanguagePairException = UnsupportedLanguagePairException;
class DetectedLanguageLowConfidenceException extends TranslateServiceException_1.TranslateServiceException {
    constructor(opts) {
        super({
            name: "DetectedLanguageLowConfidenceException",
            $fault: "client",
            ...opts,
        });
        this.name = "DetectedLanguageLowConfidenceException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DetectedLanguageLowConfidenceException.prototype);
        this.Message = opts.Message;
        this.DetectedLanguageCode = opts.DetectedLanguageCode;
    }
}
exports.DetectedLanguageLowConfidenceException = DetectedLanguageLowConfidenceException;
class ServiceUnavailableException extends TranslateServiceException_1.TranslateServiceException {
    constructor(opts) {
        super({
            name: "ServiceUnavailableException",
            $fault: "server",
            ...opts,
        });
        this.name = "ServiceUnavailableException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServiceUnavailableException.prototype);
        this.Message = opts.Message;
    }
}
exports.ServiceUnavailableException = ServiceUnavailableException;
class TextSizeLimitExceededException extends TranslateServiceException_1.TranslateServiceException {
    constructor(opts) {
        super({
            name: "TextSizeLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "TextSizeLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TextSizeLimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
exports.TextSizeLimitExceededException = TextSizeLimitExceededException;
const TerminologyDataFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.File && { File: smithy_client_1.SENSITIVE_STRING }),
});
exports.TerminologyDataFilterSensitiveLog = TerminologyDataFilterSensitiveLog;
const ImportTerminologyRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TerminologyData && { TerminologyData: (0, exports.TerminologyDataFilterSensitiveLog)(obj.TerminologyData) }),
});
exports.ImportTerminologyRequestFilterSensitiveLog = ImportTerminologyRequestFilterSensitiveLog;
